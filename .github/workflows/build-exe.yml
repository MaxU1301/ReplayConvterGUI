name: Build Python Executable and Release

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
    tags:
      - 'v*' # Also trigger on tags like v1.0, v2.0.1

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: x64
            pyinstaller_target_arch: x86_64 # PyInstaller's designation for x64
            output_suffix: x64
          - arch: arm64
            pyinstaller_target_arch: arm64
            output_suffix: arm64
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller ttkthemes

      - name: Build executable with PyInstaller for ${{ matrix.arch }}
        id: build_exe
        run: |
          $base_name = "ReplayConverterGUI-${{ matrix.output_suffix }}"
          $pyinstaller_output_dir_name = $base_name # PyInstaller creates a dir with this name in --onedir mode
          $full_pyinstaller_output_dir_path = "dist/$pyinstaller_output_dir_name"
          $zip_file_name = "$base_name.zip" # e.g., ReplayConverterGUI-x64.zip
          $zip_file_path = "dist/$zip_file_name" # e.g., dist/ReplayConverterGUI-x64.zip

          pyinstaller --name $base_name --onedir --windowed --icon=src/icon.png --target-arch=${{ matrix.pyinstaller_target_arch }} src/main.py

          # Create a zip of the output directory created by PyInstaller
          Compress-Archive -Path $full_pyinstaller_output_dir_path -DestinationPath $zip_file_path -Force

          echo "BUILD_OUTPUT_NAME=$zip_file_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "BUILD_OUTPUT_PATH=$zip_file_path" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Upload executable artifact (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: ReplayConverterGUI-Windows-${{ matrix.output_suffix }}
          path: ${{ steps.build_exe.outputs.BUILD_OUTPUT_PATH }}

  create-release:
    needs: build
    runs-on: ubuntu-latest # Release creation can run on any OS
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write # Required to create releases and upload assets
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a directory named 'artifacts'
                          # Each artifact will be in a subdirectory: artifacts/ReplayConverterGUI-Windows-x64, etc.

      - name: Determine Release Tag and Name
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG_NAME="latest-dev-$(date +%Y%m%d%H%M%S)"
            RELEASE_NAME="Development Build $(date "+%Y-%m-%d %H:%M:%S")"
            PRERELEASE=true
          else # It's a tag
            TAG_NAME="${{ github.ref_name }}"
            RELEASE_NAME="Release ${{ github.ref_name }}"
            PRERELEASE=false
            # For tags, check if tag name itself indicates prerelease (e.g. v1.0-rc1)
            if [[ "${{ github.ref_name }}" == *-* ]]; then
              PRERELEASE=true
            fi
          fi
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "PRERELEASE=${PRERELEASE}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.TAG_NAME }}
          name: ${{ steps.release_info.outputs.RELEASE_NAME }}
          body: |
            Automated release of ReplayConverterGUI.
          draft: false
          prerelease: ${{ steps.release_info.outputs.PRERELEASE }}
          files: |
            artifacts/ReplayConverterGUI-Windows-x64/ReplayConverterGUI-x64.zip
            artifacts/ReplayConverterGUI-Windows-arm64/ReplayConverterGUI-arm64.zip